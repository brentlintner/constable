// Generated by CoffeeScript 1.12.7
var _, app, configure, constable, interpret, log, logger, pad_string, pkg, run;

logger = require("./logger");

pkg = require("./../package");

constable = require("./index");

app = require("commander");

_ = require("lodash");

log = logger.create("cli");

pad_string = function(str, padding) {
  var i, len, results;
  if (padding == null) {
    padding = 20;
  }
  len = str ? str.length : 0;
  _.each((function() {
    results = [];
    for (var i = len; len <= padding ? i <= padding : i >= padding; len <= padding ? i++ : i--){ results.push(i); }
    return results;
  }).apply(this), function() {
    return str += " ";
  });
  return str;
};

run = function(app) {
  var opts;
  if (app.verbose) {
    logger.verbose(true);
  }
  if (app.quiet) {
    logger.quiet();
  }
  if (app.list) {
    constable.list(function(available) {
      if (available.length > 0) {
        log.info("available packages to update:");
        log.info();
        return _.each(available, function(dep) {
          return log.info("  " + (pad_string(dep.name)) + " " + (pad_string(dep.version, 10)) + " => " + dep.latest);
        });
      } else {
        return log.info("no updated packages available");
      }
    });
  }
  if (app.update) {
    opts = {
      tabbing: app.tabbing
    };
    return constable.update(opts, function(updated) {
      if (updated.length > 0) {
        log.info("updating all packages");
        log.info();
        return _.each(updated, function(dep) {
          return log.info("  " + (pad_string(dep.name)) + " " + (pad_string(dep.version, 10)) + " => " + dep.latest);
        });
      } else {
        return log.info("no packages to update");
      }
    });
  }
};

configure = function() {
  app.version(pkg.version).usage("[options]").option("-l, --list", "list available updates").option("-u, --update", "update bower.json with the latest available versions").option("-t, --tabbing [number]", "number of spaces to use when overwriting bower.json (default=2)").option("-q, --quiet", "be wvery wvery quiet.").option("-v, --verbose", "log all the things.");
  if (!process.argv.slice(2).length) {
    return app.outputHelp();
  }
};

interpret = function(argv) {
  configure();
  app.parse(argv);
  return run(app);
};

module.exports = {
  interpret: interpret
};
