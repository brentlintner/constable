// Generated by CoffeeScript 1.12.7
var _, fs, list, log, logger, parse, path, to_n, update_cwd_deps;

fs = require("fs");

path = require("path");

_ = require("lodash");

logger = require("./logger");

list = require("./list");

log = logger.create("update");

parse = function(json_path) {
  var err, json;
  json = null;
  try {
    return json = require(json_path);
  } catch (error) {
    err = error;
    if (err.code === "MODULE_NOT_FOUND") {
      log.error("can not find a bower.json in " + (process.cwd()));
      return process.exit(1);
    } else {
      throw err;
    }
  }
};

to_n = function(str) {
  if (typeof str === "string" && /[0-9]*/.test(str)) {
    return Number(str);
  } else {
    return str;
  }
};

update_cwd_deps = function(opts, cb) {
  var bower_json, dependencies, devDependencies, file, tabbing, updated;
  if (opts == null) {
    opts = {};
  }
  bower_json = path.join(process.cwd(), "bower.json");
  tabbing = opts.tabbing ? to_n(opts.tabbing) : 2;
  file = parse(bower_json);
  dependencies = file.dependencies;
  devDependencies = file.devDependencies;
  updated = [];
  return list.available(function(pkgs) {
    var data;
    _.each(dependencies, function(version, name) {
      var pkg;
      pkg = _.find(pkgs, function(pkg) {
        return pkg.name === name;
      });
      if (pkg) {
        updated.push(pkg);
        return dependencies[name] = pkg.latest;
      }
    });
    _.each(devDependencies, function(version, name) {
      var pkg;
      pkg = _.find(pkgs, function(pkg) {
        return pkg.name === name;
      });
      if (pkg) {
        updated.push(pkg);
        return devDependencies[name] = pkg.latest;
      }
    });
    data = JSON.stringify(file, null, tabbing);
    fs.writeFileSync(bower_json, data);
    return cb(updated);
  });
};

module.exports = {
  available: update_cwd_deps
};
